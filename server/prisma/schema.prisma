generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================= ENUMS =========================

enum EAttackType {
  Physical
  Magical
}

enum EPetRole {
  Tank
  Mage
  Support
  Assassin
  Warrior
}

enum EElemental {
  Metal
  Wood
  Water
  Fire
  Earth
}

enum ERarity {
  Uncommon
  Common
  Rare
  Epic
  Legendary
  Mythic
  Limited
}

enum ETargetPosition {
  Front
  Back
  All
  Random
  Self
  LowestHP
  HighestHP
  Nearest
  Farthest
}

enum EEffectTarget {
  Ally
  Enemy
}

enum EEffect {
  Heal
  DOT
  BuffStat
  DebuffStat
  RemoveBuff
  RemoveDebuff
  Silence
  ReducedHealing
  LifeSteal
  Revive
  Thorns
}

enum EStat {
  Hp
  Mana
  Atk
  Def
}

enum ESkillType {
  Passive
  Active
}

// ========================= TABLES =========================

model User {
  id              String                 @id @default(uuid())
  username        String                 @unique
  mezon_id        String                 @unique
  z_coin          Int                    @default(0)
  exp             Int                    @default(0)
  level           Int                    @default(1)
  avatar          String                 @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRfmEu4YN6-g4qQAnwyk7fx0YF5QrVvPM8rAw&s")
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  dailyActivities UserDailyActivities[]
  userPets        UserPet[]
  teams           Team[]
}

model UserDailyActivities {
  id              String                 @id @default(uuid())
  user_id         String
  daily           Int                    @default(0)
  hunt            Int                    @default(0)
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  user            User                   @relation(fields: [user_id], references: [id])
}

model Rarity {
  id              Int                    @id @default(autoincrement())
  name            String                 @unique
  mezon_emoji_id  String                 @unique
  type            ERarity?
  catch_rate      Float
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  pets      Pet[]
}

model AutoAttack {
  id              Int                    @id @default(autoincrement())
  pet_id          Int                    @unique
  name            String
  description     String?
  damage          Int
  attack_type     EAttackType
  attack_position ETargetPosition
  target_count    Int                    @default(1)
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  pet             Pet                    @relation(fields: [pet_id], references: [id])
}

model PassiveSkill {
  id              Int                    @id @default(autoincrement())
  pet_id          Int                    @unique
  name            String
  description     String?
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  pet             Pet                    @relation(fields: [pet_id], references: [id])
}

model ActiveSkill {
  id                          Int                @id @default(autoincrement())
  pet_id                      Int                @unique
  name                        String
  description                 String?
  mana_cost                   Int
  attack_type                 EAttackType?
  damage                      Int?
  attack_position             ETargetPosition?
  attack_target_count         Int?               @default(1)
  created_at                  DateTime           @default(now())
  updated_at                  DateTime           @default(now())          @updatedAt         

  pet                         Pet                @relation(fields: [pet_id], references: [id])
}

model Effect {
  id                          Int                @id @default(autoincrement())
  skill_type                  ESkillType
  skill_id                    Int                
  name                        String
  description                 String?
  effect_target               EEffectTarget
  effect_target_position      ETargetPosition
  effect_target_count         Int                @default(1)
  effect                      EEffect
  effect_stat                 EStat?
  created_at                  DateTime           @default(now())
  updated_at                  DateTime           @default(now())          @updatedAt     
}

model Statistics {
  id              Int                    @id @default(autoincrement())
  name            String
  attack_type     EAttackType
  role            EPetRole
  element_type    EElemental?
  rarity          ERarity
  hp              Int
  mana            Int
  ad              Int
  ap              Int
  ar              Int
  mr              Int
  hp_per_level    Int
  ad_per_level    Int
  ap_per_level    Int
  ar_per_level    Int
  mr_per_level    Int
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  pets            Pet[]
}

model Pet {
  id              Int                    @id @default(autoincrement())
  name            String                 @unique
  mezon_emoji_id  String                 @unique
  description     String?
  statistic_id    Int
  rarity_id       Int
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  userPets        UserPet[]
  autoAttack      AutoAttack?
  passiveSkill    PassiveSkill?
  activeSkill     ActiveSkill?
  statistic       Statistics             @relation(fields: [statistic_id], references: [id])
  rarity          Rarity                 @relation(fields: [rarity_id], references: [id])
}

model UserPet {
  id              Int                    @id @default(autoincrement())
  user_id         String
  pet_id          Int
  nickname        String?
  level           Int                    @default(1)
  exp             Int                    @default(0)
  additional_hp   Int                    @default(0)
  additional_mana Int                    @default(0)
  additional_ad   Int                    @default(0)
  additional_ap   Int                    @default(0)
  additional_ar   Int                    @default(0)
  additional_mr   Int                    @default(0)
  lock            Boolean                @default(false)
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  user            User                   @relation(fields: [user_id], references: [id])
  pet             Pet                    @relation(fields: [pet_id], references: [id])
  teamMembers     TeamMember[]
}

model Team {
  id              Int                    @id @default(autoincrement())
  user_id         String
  name            String
  order           Int
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())          @updatedAt         

  user            User                   @relation(fields: [user_id], references: [id])
  members         TeamMember[]
  battlesA        Battle[]               @relation("TeamA")
  battlesB        Battle[]               @relation("TeamB")
  wins            Battle[]               @relation("WinningTeam")
}

model TeamMember {
  id              Int                    @id @default(autoincrement())
  team_id         Int
  user_pet_id     Int
  position        Int
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())         @updatedAt         

  team            Team                   @relation(fields: [team_id], references: [id])
  userPet         UserPet                @relation(fields: [user_pet_id], references: [id])
}

model Battle {
  id              Int                    @id @default(autoincrement())
  team_a_id       Int
  team_b_id       Int
  winner_team_id  Int
  started_at      DateTime               @default(now())
  ended_at        DateTime?
  created_at      DateTime               @default(now())
  updated_at      DateTime               @default(now())         @updatedAt         

  teamA           Team                   @relation("TeamA", fields: [team_a_id], references: [id])
  teamB           Team                   @relation("TeamB", fields: [team_b_id], references: [id])
  winner          Team                   @relation("WinningTeam", fields: [winner_team_id], references: [id])
}
